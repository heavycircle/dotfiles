#!/usr/bin/env bash

# A bash plugin utility for getting plugins.

usage() {
    echo "Usage: ${0##*/} COMMAND"
    echo
    echo "Manage Plugins"
    echo
    echo "COMMAND"
    echo "    list      List available plugins."
    echo
    echo "OPTIONS"
    echo "    -h        Display this help message."
    echo
    exit 1
}

# Get the list of available plugins.
get-plugins() {
    shopt -s nullglob   # Don't glob an empty directory

    # Ensure directory exists
    [[ -d "$BASHPLUG_PLUGINS" ]] || fatal "Missing plugins directory!"

    # Get plugin list
    local plug plugtype plugdir
    local -a plugins

    # Default plugins
    for plugtype in $BASHPLUG_PLUGINS/*; do
        for plug in $plugtype/*; do
            # Can either be a directory or .bash file
            [[ -d "$plug" || "${plug##*.}" == "bash" ]] || continue

            # Get the basename and dirname
            local basename=${plug##*/}
            local dirname=${plug%/*}
            dirname=${dirname##*/}

            # Add to the list
            plugins+=( "$dirname"/"$basename" )
        done
    done

    # TODO - Will plugins always be sorted?

    # Return via $REPLY
    REPLY="${plugins[@]}"
}

# Set the BASHPLUG environment variables.
set-env() {
    # Get our base directory
    local BASHPLUG_HOME=${BASH_CONFIG:-$HOME/.config/bash}

    # Export key locations
    export BASHPLUG_LIB=${BASHPLUG_HOME}/lib            # Library functions
    export BASHPLUG_PLUGINS=${BASHPLUG_HOME}/plugins    # Default installed plugins
}

fatal() {
    echo -e "[\033[31m-\033[0m] FATAL: $1"
    return 1
}

# Source all the plugins in the plugins directory.
plug-init() {
    # Make environment
    set-env

    # Get plugin list
    get-plugins
    local -a plugins=($REPLY)

    # Source each plugin
    local plug
    for plug in "${plugins[@]}"; do
        if [[ -d "$BASHPLUG_PLUGINS"/"$plug" ]]; then
            local plugname=${plug##*/}
            source "$BASHPLUG_PLUGINS"/"$plug"/"$plugname".bash
        else
            source "$BASHPLUG_PLUGINS"/"$plug"
        fi
    done
}

# Get the list of installed plugins.
plug-list() {
    # Get plugin list
    get-plugins
    local -a plugins=($REPLY)

    echo "Your available plugins:"
    local idx
    for idx in "${!plugins[@]}"; do
        echo "$((idx + 1)): ${plugins[$idx]}"
    done
}

# Install a new plugin. Expects the format
# author/reponame[.git].
# Automatically sources this new plugin.
plug-install() {
    local plugin="$1"
    local plugname=${plugin##*/}    # Basename 
    plugname=${plugname%.git}       # Remove .git
    plugname=${plugname,,}          # Lowercase

    # Sanity check
    command -v git >/dev/null || fatal "Git not installed!"

    # Clone the repo
    echo "Installing $plugname . . ."
    local url="https://github.com/$plugin"
    git clone "$url" "$BASHPLUG_CUSTOM"

    # Source this new plugin
    source "$BASHPLUG_CUSTOM"/"$plugname"/"$plugname".bash
}

plug-enable() {
    local plugin="$1"
}

plug-disable() {
    local plugin="$1"
}

# Main program driver.
bashplug() {
    local command="$1"

    case "$command" in
    disable | enable | init | install | list) plug-"$command" ;;
    -h | --help) usage ;;
    -* | --*) fatal "Unknown Flag: $command" ;;
    *) fatal " Unknown Option: $command" ;;
    esac
}
